{"version":3,"sources":["EmailTemplate.js","EmailPreview.js","App.js","reportWebVitals.js","index.js"],"names":["EditorCt","styled","div","useStyles","makeStyles","theme","subject","width","marginBottom","spacing","EmailTemplate","props","classes","useState","ready","setReady","subjectState","setsubjectState","templateState","setTemplateState","useQuill","modules","toolbar","header","quill","quillRef","React","useEffect","a","fetch","response","json","emailtemplate","fetchData","setContents","JSON","parse","console","log","root","innerHTML","Fragment","hidden","TextField","value","onChange","event","target","className","label","variant","ref","Button","onClick","data","stringify","getContents","method","body","headers","Headers","color","CircularProgress","forwardRef","EmailPreview","row","disable","ops","emailHtml","replace","Talent_Name","jobs","length","forEach","job","clipboard","dangerouslyPasteHTML","Title","h1","JobCell","ButtonGroups","link","cursor","modal","display","alignItems","justifyContent","paper","backgroundColor","palette","background","border","boxShadow","shadows","padding","COLUMNS","field","headerName","App","setData","page","setPage","rowsPerPage","setRowsPerPage","openTemplate","setOpenTemplate","openPreview","setOpenPreview","previewRow","setPreviewRow","fileUploader","url","file","files","FormData","append","alert","loadData","rowData","talentDict","reduce","accumulator","currentValue","talent_id","push","Company","Location","JobURL","talentData","Object","values","filter","map","job1","job2","job3","job4","job5","id","handlePreview","dataset","handleCloseModal","Container","maxWidth","document","getElementById","click","type","accept","TableContainer","component","Paper","Table","size","aria-label","TableHead","TableRow","col","TableCell","TableBody","slice","substr","href","LinkedInURL","Link","underline","data-row","TablePagination","count","onChangePage","newPage","onChangeRowsPerPage","parseInt","rowsPerPageOptions","Modal","open","onClose","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.b028c753.chunk.js","sourcesContent":["import React, {useState} from 'react';\r\nimport { useQuill } from 'react-quilljs';\r\nimport { Button } from '@material-ui/core';\r\n\r\nimport 'quill/dist/quill.snow.css';\r\nimport styled from 'styled-components';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport CircularProgress from '@material-ui/core/CircularProgress';\r\n\r\nconst EditorCt = styled.div`\r\n  width: 800px;\r\n  height: 300px;\r\n  & .ql-container {\r\n      height: calc(100% - 50px)\r\n  }\r\n`\r\nconst useStyles = makeStyles((theme) => ({\r\n    subject: {\r\n        width: '100%',\r\n        marginBottom: theme.spacing(2)\r\n    }\r\n}))\r\n\r\nfunction EmailTemplate(props) {\r\n    const classes = useStyles();\r\n    const [ready, setReady] = useState(false)\r\n    const [subjectState, setsubjectState] = useState(\"\")\r\n    const [templateState, setTemplateState]  = useState()\r\n    const { quill, quillRef } = useQuill({modules: {\r\n        toolbar: [\r\n          [{ header: [1, 2, false] }],\r\n          ['bold', 'italic', 'underline'],\r\n          ['image', 'code-block']\r\n        ]\r\n      }});\r\n\r\n    const submitTemplate = () => {\r\n        const data = JSON.stringify({\r\n            subject: subjectState,\r\n            emailtemplate: JSON.stringify(quill.getContents())\r\n        })\r\n        fetch('http://localhost:8888/api/emailtemplate', {\r\n            method: 'PUT',\r\n            body: data,\r\n            headers: new Headers({\r\n                'Content-Type': 'application/json'\r\n            })\r\n        })\r\n    }\r\n\r\n    React.useEffect(() => {\r\n        async function fetchData() {\r\n            const response = await fetch('http://localhost:8888/api/emailtemplate')\r\n            const {subject, emailtemplate} = await response.json()\r\n            setsubjectState(subject || subject)\r\n            setReady(true)\r\n            setTemplateState(emailtemplate)\r\n        }\r\n        fetchData();\r\n      }, [])\r\n\r\n    React.useEffect(() => {\r\n        if (quill && templateState) {\r\n          quill.setContents(JSON.parse(templateState))\r\n          console.log(quill.root.innerHTML)\r\n        }\r\n        \r\n    }, [quill, templateState]);\r\n\r\n    return (\r\n        <div>\r\n            <React.Fragment>\r\n                <div hidden={!ready}>\r\n                    <TextField value={subjectState} onChange={(event) => setsubjectState(event.target.value)} className={classes.subject} label=\"Subject\" variant=\"outlined\" />\r\n                    <EditorCt>\r\n                        <div ref={quillRef} />\r\n                    </EditorCt>\r\n                    <Button onClick={submitTemplate} variant=\"contained\" color=\"primary\"> Save </Button>\r\n                </div>\r\n                <div hidden={ready}>\r\n                    <CircularProgress />\r\n                </div>\r\n            </React.Fragment>\r\n\r\n        </div>\r\n    )\r\n} \r\n\r\nexport default React.forwardRef((props, ref) => <EmailTemplate {...props} />);","import React, {useState} from 'react';\r\nimport { useQuill } from 'react-quilljs';\r\nimport { Button } from '@material-ui/core';\r\n\r\nimport 'quill/dist/quill.snow.css';\r\nimport styled from 'styled-components';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport CircularProgress from '@material-ui/core/CircularProgress';\r\n\r\nconst EditorCt = styled.div`\r\n  width: 800px;\r\n  height: 300px;\r\n  & .ql-container {\r\n      height: calc(100% - 50px)\r\n  }\r\n`\r\nconst useStyles = makeStyles((theme) => ({\r\n    subject: {\r\n        width: '100%',\r\n        marginBottom: theme.spacing(2)\r\n    }\r\n}))\r\n\r\nfunction EmailPreview(props) {\r\n    const { row } = props\r\n    const classes = useStyles();\r\n    const [ready, setReady] = useState(false)\r\n    const [subjectState, setsubjectState] = useState(\"\")\r\n    const [templateState, setTemplateState]  = useState()\r\n    const { quill, quillRef } = useQuill({\r\n        \"theme\": \"snow\",\r\n        \"modules\": {\r\n            \"toolbar\": false\r\n        }\r\n      });\r\n\r\n    React.useEffect(() => {\r\n        async function fetchData() {\r\n            const response = await fetch('http://localhost:8888/api/emailtemplate')\r\n            const {subject, emailtemplate} = await response.json()\r\n            setsubjectState(subject || subject)\r\n            setReady(true)\r\n            setTemplateState(emailtemplate)\r\n        }\r\n        fetchData();\r\n    }, [])\r\n\r\n    React.useEffect(() => {\r\n        if (quill) {\r\n            quill.disable()\r\n        }\r\n        if (quill && templateState) {\r\n            const {ops} = JSON.parse(templateState)\r\n            quill.setContents(ops)\r\n            let emailHtml = quill.root.innerHTML\r\n            emailHtml = emailHtml.replace(\"[ First Name ]\", row.Talent_Name)\r\n            console.log(emailHtml)\r\n            if (row.jobs.length < 5) {\r\n                emailHtml = emailHtml.replace(/<p>5..*?<\\/p>/, \"\")\r\n            }\r\n            if (row.jobs.length < 4) {\r\n                emailHtml = emailHtml.replace(/<p>4..*?<\\/p>/, \"\")\r\n            }\r\n\r\n            row.jobs.forEach(job => {\r\n                emailHtml = emailHtml.replace(\"[Job Name]\", job[\"Job Name\"])\r\n                emailHtml = emailHtml.replace(\"[Company]\", job[\"Company\"])\r\n                emailHtml = emailHtml.replace(\"[Location]\", job[\"Location\"])\r\n                emailHtml = emailHtml.replace(\"[URL]\", `<a href=\"${job[\"JobURL\"]}\"> Job URL </a>` )\r\n            })\r\n\r\n            quill.clipboard.dangerouslyPasteHTML(emailHtml)\r\n        }\r\n        \r\n    }, [quill, templateState]);\r\n\r\n    return (\r\n        <div>\r\n            <React.Fragment>\r\n                <div hidden={!ready}>\r\n                    <TextField value={subjectState} onChange={(event) => setsubjectState(event.target.value)} className={classes.subject} label=\"Subject\" variant=\"outlined\" />\r\n                    <EditorCt>\r\n                        <div ref={quillRef} />\r\n                    </EditorCt>\r\n                    <Button variant=\"contained\" color=\"primary\"> Send </Button>\r\n                </div>\r\n                <div hidden={ready}>\r\n                    <CircularProgress />\r\n                </div>\r\n            </React.Fragment>\r\n        </div>\r\n    )\r\n} \r\n\r\nexport default React.forwardRef((props, ref) => <EmailPreview {...props} />);","import './App.css';\nimport React, {useState} from 'react';\nimport { Container, Button, Link, Modal} from '@material-ui/core';\nimport TablePagination from '@material-ui/core/TablePagination';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport Paper from '@material-ui/core/Paper';\nimport { makeStyles } from '@material-ui/core/styles';\nimport styled from 'styled-components';\nimport EmailTemplate from './EmailTemplate';\nimport EmailPreview from './EmailPreview';\n\nconst Title = styled.h1`\n  text-align: center;\n`\nconst JobCell = styled.div`\n  width: 100px;\n  height: 40px;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  word-break: break-word;\n`\nconst ButtonGroups = styled.div`\n  display:  flex;\n  justify-content: space-between;\n  margin-bottom: 2rem;\n`\n\nconst useStyles = makeStyles((theme) => ({\n  link: {\n    cursor: \"pointer\"\n  },\n  modal: {\n    display: 'flex',\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  paper: {\n    backgroundColor: theme.palette.background.paper,\n    border: '2px solid #000',\n    boxShadow: theme.shadows[5],\n    padding: theme.spacing(2, 4, 3),\n  },\n})\n);\n\n// [\"Talent\", \"Email\",\"Location\",\"Seniority\",\"TechStack\",\"IOM\",\"Job1\",\"Job2\",\"Job3\",\"Job4\",\"Job5\",\"LinkedURL\",\"Preview\"]\nconst COLUMNS = [\n  {\n    field: 'Talent_Name',\n    headerName: 'Talent',\n  },{\n    field: 'Email',\n    headerName: 'Email',\n  },{\n    field: 'Location',\n    headerName: 'Location',\n  },{\n    field: 'Seniority',\n    headerName: 'Seniority',\n  },{\n    field: 'TechStack',\n    headerName: 'Tech Stack',\n  },{\n    field: 'IOM',\n    headerName: 'IOM',\n  },{\n    field: 'job1',\n    headerName: 'Job1',\n  },{\n    field: 'job2',\n    headerName: 'Job2',\n  },{\n    field: 'job3',\n    headerName: 'Job3',\n  },{\n    field: 'job4',\n    headerName: 'Job4',\n  },{\n    field: 'job5',\n    headerName: 'Job5',\n  }\n]\n\n\nfunction App() {\n  const classes = useStyles();\n\n  const [data, setData] = useState([]);\n  const [page, setPage] = useState(1);\n  const [rowsPerPage, setRowsPerPage] = React.useState(10);\n\n  const [openTemplate, setOpenTemplate] = useState(false);\n  const [openPreview, setOpenPreview] = useState(false);\n  const [previewRow, setPreviewRow] = useState();\n\n  const talentImport = () => {\n    document.getElementById('talent_input').click()\n  }\n\n  const jdImport = () => {\n    document.getElementById('jd_input').click()\n  }\n\n  const fileUploader = (url) => {\n    return async (event) => {\n      const file = event.target.files[0]\n      const data = new FormData()\n      data.append('file', file)\n      try {\n        let response = await fetch('http://localhost:8888/api/' + url, {\n          method: 'PUT',\n          body: data\n        })\n        event.target.value = ''\n      } catch(err) {\n        alert(err)\n      }\n    }\n  }\n\n  const loadData = async () => {\n    try {\n      const response = await fetch(\"http://localhost:8888/api/loaddata\")\n      const rowData = await response.json()\n      const talentDict =  rowData.reduce((accumulator, currentValue) => {\n        const talent_id = currentValue.talent_id\n        if(accumulator[talent_id]) {\n          \n          accumulator[talent_id].jobs.push({\n            \"Job Name\": currentValue[\"Job Name\"],\n            Company: currentValue.Company,\n            Location: currentValue.Location,\n            JobURL: currentValue.JobURL\n          }) \n        } else {\n          accumulator[talent_id] = currentValue\n          accumulator[talent_id].jobs = [{\n            \"Job Name\": currentValue[\"Job Name\"],\n            Company: currentValue.Company,\n            Location: currentValue.Location,\n            JobURL: currentValue.JobURL\n          }]\n        }\n        return accumulator\n      } ,{})\n\n      const talentData = Object.values(talentDict).filter(row => row.jobs.length > 2).map(row => {\n        row.job1 = row.jobs[0].JobURL\n        row.job2 = row.jobs[1].JobURL\n        row.job3 = row.jobs[2].JobURL\n        row.job4 = row.jobs[3]?.JobURL\n        row.job5 = row.jobs[4]?.JobURL\n        row.id = row.talent_id\n        return row\n      })\n      setData(talentData)\n    } catch(err) {\n      alert(err)\n    }\n  }\n\n  const handleChangePage = (event, newPage) => {\n    setPage(newPage);\n  };\n\n  const handleChangeRowsPerPage = (event) => {\n    setRowsPerPage(parseInt(event.target.value, 10));\n    setPage(0);\n  };\n\n  const emailTemplateTrigger = () => {\n    setOpenTemplate(true)\n  }\n\n  const handlePreview = (event) => {\n    setPreviewRow(JSON.parse(event.target.dataset.row))\n    setOpenPreview(true)\n  }\n\n  const handleCloseModal = () => {\n    setOpenTemplate(false)\n    setOpenPreview(false)\n  }\n\n  return (\n    <React.Fragment>\n      <Container maxWidth=\"lg\">\n        <Title>\n            OCInsights Automated Newsletter System\n        </Title>\n\n        <ButtonGroups>\n          <Button onClick={talentImport} variant=\"contained\" color=\"primary\"> Talents Import </Button>\n          <Button onClick={jdImport} variant=\"contained\" color=\"primary\"> JD Import </Button>\n          <Button onClick={emailTemplateTrigger} variant=\"contained\" color=\"primary\"> Email Template </Button>\n        </ButtonGroups>\n\n        <ButtonGroups>\n          <Button onClick={loadData} variant=\"contained\"> Load Data</Button>\n        </ButtonGroups>\n        <div hidden>\n          <input onChange={fileUploader(\"talent\")} type=\"file\" id='talent_input' accept=\".xlsx\"/>\n          <input onChange={fileUploader(\"jd\")} type=\"file\" id='jd_input' accept=\".xlsx\"/>\n        </div>\n        <TableContainer component={Paper}>\n          <Table size=\"small\" aria-label=\"a dense table\">\n            <TableHead>\n              <TableRow>\n                {COLUMNS.map(col => <TableCell key={col.headerName} >{col.headerName}</TableCell>)}\n                <TableCell >LinkedIn</TableCell>\n                <TableCell >Preview</TableCell>\n              </TableRow>\n            </TableHead>\n            <TableBody>\n              {data.slice(page*rowsPerPage, (page + 1)*rowsPerPage).map((row) => (\n                <TableRow key={row.id}>\n                  {COLUMNS.map(col => {\n                    if (col.field.substr(0, 3) == 'job') {\n                      return <TableCell key={col.field} ><JobCell><a href={row[col.field]} target=\"_blank\">{row[col.field]}</a></JobCell></TableCell>\n                    }\n                    return <TableCell key={col.field} >{row[col.field]}</TableCell>\n                  })}\n                  <TableCell ><JobCell><a href={row.LinkedInURL} target=\"_blank\">{row.LinkedInURL}</a></JobCell></TableCell>\n                  <TableCell ><Link underline=\"always\" className={classes.link} data-row={JSON.stringify(row)} onClick={handlePreview}>Preview</Link></TableCell>\n                </TableRow>\n              ))}\n            </TableBody>\n          </Table>\n          <TablePagination\n            component=\"div\"\n            count={data.length}\n            page={page}\n            onChangePage={handleChangePage}\n            rowsPerPage={rowsPerPage}\n            onChangeRowsPerPage={handleChangeRowsPerPage}\n            rowsPerPageOptions={[5, 10]}\n          />\n        </TableContainer>\n      <Modal className={classes.modal} open={openTemplate} onClose={handleCloseModal}>\n        <div className={classes.paper}>\n          <EmailTemplate/>\n        </div>\n      </Modal>\n      <Modal className={classes.modal} open={openPreview} onClose={handleCloseModal}>\n        <div className={classes.paper}>\n          <EmailPreview row={previewRow}/>\n        </div>\n      </Modal>\n      </Container>\n    </React.Fragment>\n    )\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}